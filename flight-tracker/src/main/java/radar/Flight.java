/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package radar;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3553874304854452497L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"radar\",\"fields\":[{\"name\":\"airportUpdateEvent\",\"type\":{\"type\":\"record\",\"name\":\"AirportUpdateEvent\",\"fields\":[{\"name\":\"airport\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"longitude\",\"type\":[\"double\",\"null\"]},{\"name\":\"tz\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"transformedFlight\",\"type\":{\"type\":\"record\",\"name\":\"TransformedFlight\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"departureAirportCode\",\"type\":\"string\"},{\"name\":\"arrivalAirportCode\",\"type\":\"string\"},{\"name\":\"departureTime\",\"type\":\"string\"},{\"name\":\"arrivalTime\",\"type\":\"string\"},{\"name\":\"departureTimestamp\",\"type\":\"long\"},{\"name\":\"arrivalTimestamp\",\"type\":\"long\"},{\"name\":\"duration\",\"type\":\"int\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"gate\",\"type\":\"string\"},{\"name\":\"airline\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Flight> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Flight> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Flight> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Flight> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Flight to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Flight from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Flight instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Flight fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private radar.AirportUpdateEvent airportUpdateEvent;
  private radar.TransformedFlight transformedFlight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Flight() {}

  /**
   * All-args constructor.
   * @param airportUpdateEvent The new value for airportUpdateEvent
   * @param transformedFlight The new value for transformedFlight
   */
  public Flight(radar.AirportUpdateEvent airportUpdateEvent, radar.TransformedFlight transformedFlight) {
    this.airportUpdateEvent = airportUpdateEvent;
    this.transformedFlight = transformedFlight;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return airportUpdateEvent;
    case 1: return transformedFlight;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: airportUpdateEvent = (radar.AirportUpdateEvent)value$; break;
    case 1: transformedFlight = (radar.TransformedFlight)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'airportUpdateEvent' field.
   * @return The value of the 'airportUpdateEvent' field.
   */
  public radar.AirportUpdateEvent getAirportUpdateEvent() {
    return airportUpdateEvent;
  }


  /**
   * Sets the value of the 'airportUpdateEvent' field.
   * @param value the value to set.
   */
  public void setAirportUpdateEvent(radar.AirportUpdateEvent value) {
    this.airportUpdateEvent = value;
  }

  /**
   * Gets the value of the 'transformedFlight' field.
   * @return The value of the 'transformedFlight' field.
   */
  public radar.TransformedFlight getTransformedFlight() {
    return transformedFlight;
  }


  /**
   * Sets the value of the 'transformedFlight' field.
   * @param value the value to set.
   */
  public void setTransformedFlight(radar.TransformedFlight value) {
    this.transformedFlight = value;
  }

  /**
   * Creates a new Flight RecordBuilder.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder() {
    return new radar.Flight.Builder();
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder(radar.Flight.Builder other) {
    if (other == null) {
      return new radar.Flight.Builder();
    } else {
      return new radar.Flight.Builder(other);
    }
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Flight instance.
   * @param other The existing instance to copy.
   * @return A new Flight RecordBuilder
   */
  public static radar.Flight.Builder newBuilder(radar.Flight other) {
    if (other == null) {
      return new radar.Flight.Builder();
    } else {
      return new radar.Flight.Builder(other);
    }
  }

  /**
   * RecordBuilder for Flight instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
    implements org.apache.avro.data.RecordBuilder<Flight> {

    private radar.AirportUpdateEvent airportUpdateEvent;
    private radar.AirportUpdateEvent.Builder airportUpdateEventBuilder;
    private radar.TransformedFlight transformedFlight;
    private radar.TransformedFlight.Builder transformedFlightBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(radar.Flight.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.airportUpdateEvent)) {
        this.airportUpdateEvent = data().deepCopy(fields()[0].schema(), other.airportUpdateEvent);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasAirportUpdateEventBuilder()) {
        this.airportUpdateEventBuilder = radar.AirportUpdateEvent.newBuilder(other.getAirportUpdateEventBuilder());
      }
      if (isValidValue(fields()[1], other.transformedFlight)) {
        this.transformedFlight = data().deepCopy(fields()[1].schema(), other.transformedFlight);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasTransformedFlightBuilder()) {
        this.transformedFlightBuilder = radar.TransformedFlight.newBuilder(other.getTransformedFlightBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Flight instance
     * @param other The existing instance to copy.
     */
    private Builder(radar.Flight other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.airportUpdateEvent)) {
        this.airportUpdateEvent = data().deepCopy(fields()[0].schema(), other.airportUpdateEvent);
        fieldSetFlags()[0] = true;
      }
      this.airportUpdateEventBuilder = null;
      if (isValidValue(fields()[1], other.transformedFlight)) {
        this.transformedFlight = data().deepCopy(fields()[1].schema(), other.transformedFlight);
        fieldSetFlags()[1] = true;
      }
      this.transformedFlightBuilder = null;
    }

    /**
      * Gets the value of the 'airportUpdateEvent' field.
      * @return The value.
      */
    public radar.AirportUpdateEvent getAirportUpdateEvent() {
      return airportUpdateEvent;
    }


    /**
      * Sets the value of the 'airportUpdateEvent' field.
      * @param value The value of 'airportUpdateEvent'.
      * @return This builder.
      */
    public radar.Flight.Builder setAirportUpdateEvent(radar.AirportUpdateEvent value) {
      validate(fields()[0], value);
      this.airportUpdateEventBuilder = null;
      this.airportUpdateEvent = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'airportUpdateEvent' field has been set.
      * @return True if the 'airportUpdateEvent' field has been set, false otherwise.
      */
    public boolean hasAirportUpdateEvent() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'airportUpdateEvent' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public radar.AirportUpdateEvent.Builder getAirportUpdateEventBuilder() {
      if (airportUpdateEventBuilder == null) {
        if (hasAirportUpdateEvent()) {
          setAirportUpdateEventBuilder(radar.AirportUpdateEvent.newBuilder(airportUpdateEvent));
        } else {
          setAirportUpdateEventBuilder(radar.AirportUpdateEvent.newBuilder());
        }
      }
      return airportUpdateEventBuilder;
    }

    /**
     * Sets the Builder instance for the 'airportUpdateEvent' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public radar.Flight.Builder setAirportUpdateEventBuilder(radar.AirportUpdateEvent.Builder value) {
      clearAirportUpdateEvent();
      airportUpdateEventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'airportUpdateEvent' field has an active Builder instance
     * @return True if the 'airportUpdateEvent' field has an active Builder instance
     */
    public boolean hasAirportUpdateEventBuilder() {
      return airportUpdateEventBuilder != null;
    }

    /**
      * Clears the value of the 'airportUpdateEvent' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearAirportUpdateEvent() {
      airportUpdateEvent = null;
      airportUpdateEventBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transformedFlight' field.
      * @return The value.
      */
    public radar.TransformedFlight getTransformedFlight() {
      return transformedFlight;
    }


    /**
      * Sets the value of the 'transformedFlight' field.
      * @param value The value of 'transformedFlight'.
      * @return This builder.
      */
    public radar.Flight.Builder setTransformedFlight(radar.TransformedFlight value) {
      validate(fields()[1], value);
      this.transformedFlightBuilder = null;
      this.transformedFlight = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transformedFlight' field has been set.
      * @return True if the 'transformedFlight' field has been set, false otherwise.
      */
    public boolean hasTransformedFlight() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'transformedFlight' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public radar.TransformedFlight.Builder getTransformedFlightBuilder() {
      if (transformedFlightBuilder == null) {
        if (hasTransformedFlight()) {
          setTransformedFlightBuilder(radar.TransformedFlight.newBuilder(transformedFlight));
        } else {
          setTransformedFlightBuilder(radar.TransformedFlight.newBuilder());
        }
      }
      return transformedFlightBuilder;
    }

    /**
     * Sets the Builder instance for the 'transformedFlight' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public radar.Flight.Builder setTransformedFlightBuilder(radar.TransformedFlight.Builder value) {
      clearTransformedFlight();
      transformedFlightBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transformedFlight' field has an active Builder instance
     * @return True if the 'transformedFlight' field has an active Builder instance
     */
    public boolean hasTransformedFlightBuilder() {
      return transformedFlightBuilder != null;
    }

    /**
      * Clears the value of the 'transformedFlight' field.
      * @return This builder.
      */
    public radar.Flight.Builder clearTransformedFlight() {
      transformedFlight = null;
      transformedFlightBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Flight build() {
      try {
        Flight record = new Flight();
        if (airportUpdateEventBuilder != null) {
          try {
            record.airportUpdateEvent = this.airportUpdateEventBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("airportUpdateEvent"));
            throw e;
          }
        } else {
          record.airportUpdateEvent = fieldSetFlags()[0] ? this.airportUpdateEvent : (radar.AirportUpdateEvent) defaultValue(fields()[0]);
        }
        if (transformedFlightBuilder != null) {
          try {
            record.transformedFlight = this.transformedFlightBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("transformedFlight"));
            throw e;
          }
        } else {
          record.transformedFlight = fieldSetFlags()[1] ? this.transformedFlight : (radar.TransformedFlight) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Flight>
    WRITER$ = (org.apache.avro.io.DatumWriter<Flight>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Flight>
    READER$ = (org.apache.avro.io.DatumReader<Flight>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.airportUpdateEvent.customEncode(out);

    this.transformedFlight.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.airportUpdateEvent == null) {
        this.airportUpdateEvent = new radar.AirportUpdateEvent();
      }
      this.airportUpdateEvent.customDecode(in);

      if (this.transformedFlight == null) {
        this.transformedFlight = new radar.TransformedFlight();
      }
      this.transformedFlight.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.airportUpdateEvent == null) {
            this.airportUpdateEvent = new radar.AirportUpdateEvent();
          }
          this.airportUpdateEvent.customDecode(in);
          break;

        case 1:
          if (this.transformedFlight == null) {
            this.transformedFlight = new radar.TransformedFlight();
          }
          this.transformedFlight.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










